#ifndef BSP_H
#define BSP_H
#include "PHY.h"
#include "format/bsp/dheader_t.h"

namespace PHYParser {
namespace BSP {

/**
 * Exposes access to the PHY parts of the BSP file.
 * While PHY files only use solids, we extend it with models to match the behavior of the BSP file.
 * BSP files typically have models in the map, called brush models. This class exposes them.
 */
class BSP {
public:
	struct Model {
		/**
		 * In source, this is typically the number of the string that is printed when you get the model of a bmodel (e.g. "*10").
		 */
		int index;
		/**
		 * Typically, you won't really find more than 1 or 2 solids in a model. Although, if you do take the model 0 of a map, you will find a lot of solids because
		 * that is the autogenerated map physics mesh. It's usually divided up because some parts require different surface properties (e.g, water, concrete, mud).
		 *
		 * In an application where you simply need to get the physics mesh of a map, just merge all the solids' triangles together.
		 */
		std::vector<Semantics::Solid> solids;
	};

	BSP(PHY::ParserInput &&input);
	~BSP();

	[[nodiscard]] auto GetModelCount() const noexcept -> int;
	/**
	 *
	 * @param index Index of the model to get.
	 * @return A const reference to the model. Models are less isolated than solids, so it's done this way to avoid copying or moving the model.
	 */
	[[nodiscard]] auto GetModel(int index) const -> const Model &;

private:
	PHY::ParserInput input;
	PHYData data;
	Format::dheader_t header;
	std::vector<Model> models;

	[[nodiscard]] auto ParseHeader(
		const PHYData &data) const -> Format::dheader_t;

	[[nodiscard]] auto ParseModel(
		const PHYData &data,
		const Format::lump_t &physCollideLump,
		size_t index) const -> Model;
};

} // BSP
} // PHYParser

#endif //BSP_H
